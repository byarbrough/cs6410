functor TigerLexFun (structure Tokens: Tiger_TOKENS)  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
COMMENT | E_COMMENT | INITIAL | B_COMMENT
    structure UserDeclarations = 
      struct

type svalue = Tokens.svalue
type pos = int
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue, pos) token
exception LexerException of int * int
			
val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos
val commentNest = ref 0;
fun err(p1,p2) = ErrorMsg.error p1

fun eof() = if !commentNest > 0 then raise LexerException(!lineNum, 0)
			else Tokens.EOF(!lineNum,0)





      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\b",4),
(#"\v",#"\^_",4),
(#"!",#"!",4),
(#"#",#"%",4),
(#"'",#"'",4),
(#"?",#"@",4),
(#"\\",#"\\",4),
(#"^",#"`",4),
(#"~",#"\255",4),
(#"\t",#"\t",5),
(#" ",#" ",5),
(#"\n",#"\n",6),
(#"\"",#"\"",7),
(#"&",#"&",8),
(#"(",#"(",9),
(#")",#")",10),
(#"*",#"*",11),
(#"+",#"+",12),
(#",",#",",13),
(#"-",#"-",14),
(#".",#".",15),
(#"/",#"/",16),
(#"0",#"9",17),
(#":",#":",18),
(#";",#";",19),
(#"<",#"<",20),
(#"=",#"=",21),
(#">",#">",22),
(#"A",#"Z",23),
(#"c",#"c",23),
(#"g",#"h",23),
(#"j",#"k",23),
(#"m",#"m",23),
(#"p",#"s",23),
(#"u",#"u",23),
(#"x",#"z",23),
(#"[",#"[",24),
(#"]",#"]",25),
(#"a",#"a",26),
(#"b",#"b",27),
(#"d",#"d",28),
(#"e",#"e",29),
(#"f",#"f",30),
(#"i",#"i",31),
(#"l",#"l",32),
(#"n",#"n",33),
(#"o",#"o",34),
(#"t",#"t",35),
(#"v",#"v",36),
(#"w",#"w",37),
(#"{",#"{",38),
(#"|",#"|",39),
(#"}",#"}",40)], [2]), ([(#"\^@",#"\b",111),
(#"\v",#"\^_",111),
(#"!",#"!",111),
(#"#",#"%",111),
(#"'",#"'",111),
(#"?",#"@",111),
(#"\\",#"\\",111),
(#"^",#"`",111),
(#"~",#"\255",111),
(#"\t",#"\t",112),
(#" ",#" ",112),
(#"\n",#"\n",113),
(#"\"",#"\"",114),
(#"&",#"&",115),
(#"(",#"(",116),
(#")",#")",117),
(#"*",#"*",118),
(#"+",#"+",119),
(#",",#",",120),
(#"-",#"-",121),
(#".",#".",122),
(#"/",#"/",123),
(#"0",#"9",124),
(#":",#":",125),
(#";",#";",126),
(#"<",#"<",127),
(#"=",#"=",128),
(#">",#">",129),
(#"A",#"Z",130),
(#"c",#"c",130),
(#"g",#"h",130),
(#"j",#"k",130),
(#"m",#"m",130),
(#"p",#"s",130),
(#"u",#"u",130),
(#"x",#"z",130),
(#"[",#"[",131),
(#"]",#"]",132),
(#"a",#"a",133),
(#"b",#"b",134),
(#"d",#"d",135),
(#"e",#"e",136),
(#"f",#"f",137),
(#"i",#"i",138),
(#"l",#"l",139),
(#"n",#"n",140),
(#"o",#"o",141),
(#"t",#"t",142),
(#"v",#"v",143),
(#"w",#"w",144),
(#"{",#"{",145),
(#"|",#"|",146),
(#"}",#"}",147)], [8]), ([(#"\^@",#"\b",198),
(#"\v",#"\^_",198),
(#"!",#"!",198),
(#"#",#"%",198),
(#"'",#"'",198),
(#"?",#"@",198),
(#"\\",#"\\",198),
(#"^",#"`",198),
(#"~",#"\255",198),
(#"\t",#"\t",199),
(#" ",#" ",199),
(#"\n",#"\n",6),
(#"\"",#"\"",200),
(#"&",#"&",201),
(#"(",#"(",202),
(#")",#")",203),
(#"*",#"*",204),
(#"+",#"+",205),
(#",",#",",206),
(#"-",#"-",207),
(#".",#".",208),
(#"/",#"/",209),
(#"0",#"9",210),
(#":",#":",211),
(#";",#";",212),
(#"<",#"<",213),
(#"=",#"=",214),
(#">",#">",215),
(#"A",#"Z",216),
(#"c",#"c",216),
(#"g",#"h",216),
(#"j",#"k",216),
(#"m",#"m",216),
(#"p",#"s",216),
(#"u",#"u",216),
(#"x",#"z",216),
(#"[",#"[",217),
(#"]",#"]",218),
(#"a",#"a",219),
(#"b",#"b",220),
(#"d",#"d",221),
(#"e",#"e",222),
(#"f",#"f",223),
(#"i",#"i",224),
(#"l",#"l",225),
(#"n",#"n",226),
(#"o",#"o",227),
(#"t",#"t",228),
(#"v",#"v",229),
(#"w",#"w",230),
(#"{",#"{",231),
(#"|",#"|",232),
(#"}",#"}",233)], []), ([(#"\^@",#"\b",235),
(#"\v",#"\^_",235),
(#"!",#"!",235),
(#"#",#"%",235),
(#"'",#"'",235),
(#"?",#"@",235),
(#"\\",#"\\",235),
(#"^",#"`",235),
(#"~",#"\255",235),
(#"\t",#"\t",236),
(#" ",#" ",236),
(#"\n",#"\n",237),
(#"\"",#"\"",238),
(#"&",#"&",239),
(#"(",#"(",240),
(#")",#")",241),
(#"*",#"*",242),
(#"+",#"+",243),
(#",",#",",244),
(#"-",#"-",245),
(#".",#".",246),
(#"/",#"/",247),
(#"0",#"9",248),
(#":",#":",249),
(#";",#";",250),
(#"<",#"<",251),
(#"=",#"=",252),
(#">",#">",253),
(#"A",#"Z",254),
(#"c",#"c",254),
(#"g",#"h",254),
(#"j",#"k",254),
(#"m",#"m",254),
(#"p",#"s",254),
(#"u",#"u",254),
(#"x",#"z",254),
(#"[",#"[",255),
(#"]",#"]",256),
(#"a",#"a",257),
(#"b",#"b",258),
(#"d",#"d",259),
(#"e",#"e",260),
(#"f",#"f",261),
(#"i",#"i",262),
(#"l",#"l",263),
(#"n",#"n",264),
(#"o",#"o",265),
(#"t",#"t",266),
(#"v",#"v",267),
(#"w",#"w",268),
(#"{",#"{",269),
(#"|",#"|",270),
(#"}",#"}",271)], [5]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 12, 56]), ([], [0, 11]), ([(#"\^@",#"\t",91),
(#"\v",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"0",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#"\"",#"\"",93),
(#"\\",#"\\",94)], [2, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 33, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 13, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 14, 56]), ([], [4, 24, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 26, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 22, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 23, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 19, 56]), ([], [3, 25, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"\255",41),
(#"0",#"9",90)], [2, 53, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"<",41),
(#">",#"\255",41),
(#"=",#"=",89)], [2, 21, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 20, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"<",41),
(#"?",#"\255",41),
(#"=",#"=",87),
(#">",#">",88)], [2, 28, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 27, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"<",41),
(#">",#"\255",41),
(#"=",#"=",86)], [2, 29, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 15, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 16, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",82)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",78)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"z",42),
(#"o",#"o",77)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"m",42),
(#"o",#"z",42),
(#"l",#"l",72),
(#"n",#"n",73)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"t",42),
(#"v",#"z",42),
(#"o",#"o",63),
(#"u",#"u",64)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"e",42),
(#"g",#"m",42),
(#"o",#"z",42),
(#"f",#"f",61),
(#"n",#"n",62)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",59)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",57)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"e",42),
(#"g",#"z",42),
(#"f",#"f",56)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"g",42),
(#"i",#"n",42),
(#"p",#"x",42),
(#"z",#"z",42),
(#"h",#"h",49),
(#"o",#"o",50),
(#"y",#"y",51)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",47)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"g",42),
(#"i",#"z",42),
(#"h",#"h",43)], [2, 54, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 17, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 34, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 18, 56]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",44)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"z",42),
(#"l",#"l",45)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",46)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 48, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",48)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 37, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",54)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 46, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"o",42),
(#"q",#"z",42),
(#"p",#"p",52)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",53)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 36, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",55)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 50, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 40, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"z",42),
(#"l",#"l",58)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 43, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"s",42),
(#"u",#"z",42),
(#"t",#"t",60)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 44, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 51, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 42, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",71)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",65)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"b",42),
(#"d",#"z",42),
(#"c",#"c",66)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"s",42),
(#"u",#"z",42),
(#"t",#"t",67)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",68)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"z",42),
(#"o",#"o",69)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",70)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 38, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 47, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"r",42),
(#"t",#"z",42),
(#"s",#"s",75)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"c",42),
(#"e",#"z",42),
(#"d",#"d",74)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 41, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",76)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 49, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 45, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",79)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",80)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"j",42),
(#"l",#"z",42),
(#"k",#"k",81)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 39, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",83)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",84)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"x",42),
(#"z",#"z",42),
(#"y",#"y",85)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 52, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 31]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 32]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 30]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 35]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"\255",41),
(#"0",#"9",90)], [2, 53]), ([(#"\^@",#"\t",91),
(#"\v",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"0",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#"\"",#"\"",93),
(#"\\",#"\\",94)], [2]), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], []), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 55]), ([(#"\^@",#"\t",91),
(#"\v",#"\^_",91),
(#"!",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#":",#"[",91),
(#"]",#"]",91),
(#"_",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#" ",#" ",95),
(#"\"",#"\"",96),
(#"0",#"0",97),
(#"2",#"9",97),
(#"1",#"1",98),
(#"\\",#"\\",99),
(#"^",#"^",100)], [2]), ([(#"\^@",#"\t",91),
(#"\v",#"\^_",91),
(#"!",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"0",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#" ",#" ",95),
(#"\"",#"\"",93),
(#"\\",#"\\",99)], [2]), ([(#"\^@",#"\t",91),
(#"\v",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"0",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#"\"",#"\"",93),
(#"\\",#"\\",94)], [2, 55]), ([(#"\^@",#"\t",91),
(#"\v",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"0",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#"\"",#"\"",93),
(#"\\",#"\\",94)], [2]), ([(#"\^@",#"\t",91),
(#"\v",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"3",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#"\"",#"\"",93),
(#"0",#"1",97),
(#"2",#"2",101),
(#"\\",#"\\",94)], [2]), ([(#"\^@",#"\t",91),
(#"\v",#"\^_",91),
(#"!",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#":",#"[",91),
(#"]",#"]",91),
(#"_",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#" ",#" ",95),
(#"\"",#"\"",96),
(#"0",#"0",97),
(#"2",#"9",97),
(#"1",#"1",98),
(#"\\",#"\\",99),
(#"^",#"^",100)], [2]), ([(#"\^@",#"\t",91),
(#"\v",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"0",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#"\"",#"\"",93),
(#"\\",#"\\",94)], [2]), ([(#"\^@",#"\t",91),
(#"\v",#"!",91),
(#"#",#")",91),
(#"+",#".",91),
(#"0",#"[",91),
(#"]",#"\255",91),
(#"\n",#"\n",92),
(#"*",#"*",92),
(#"/",#"/",92),
(#"\"",#"\"",93),
(#"\\",#"\\",94)], [2]), ([], [55]), ([(#"\^@",#"\^_",92),
(#"!",#"!",92),
(#"#",#"/",92),
(#":",#"[",92),
(#"]",#"]",92),
(#"_",#"\255",92),
(#" ",#" ",104),
(#"\"",#"\"",105),
(#"0",#"0",106),
(#"2",#"9",106),
(#"1",#"1",107),
(#"\\",#"\\",108),
(#"^",#"^",109)], []), ([(#"\^@",#"\^_",92),
(#"!",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#" ",#" ",104),
(#"\"",#"\"",102),
(#"\\",#"\\",108)], []), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], [55]), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], []), ([(#"\^@",#"!",92),
(#"#",#"/",92),
(#"3",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"0",#"1",106),
(#"2",#"2",110),
(#"\\",#"\\",103)], []), ([(#"\^@",#"\^_",92),
(#"!",#"!",92),
(#"#",#"/",92),
(#":",#"[",92),
(#"]",#"]",92),
(#"_",#"\255",92),
(#" ",#" ",104),
(#"\"",#"\"",105),
(#"0",#"0",106),
(#"2",#"9",106),
(#"1",#"1",107),
(#"\\",#"\\",108),
(#"^",#"^",109)], []), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], []), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], []), ([], [10, 56]), ([], [10, 12, 56]), ([], [0, 10, 11]), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], [10, 56]), ([], [10, 33, 56]), ([], [10, 13, 56]), ([], [10, 14, 56]), ([(#"*",#"*",197)], [8, 24, 56]), ([], [10, 26, 56]), ([], [10, 22, 56]), ([], [10, 23, 56]), ([], [10, 19, 56]), ([], [9, 25, 56]), ([(#"0",#"9",196)], [10, 53, 56]), ([(#"=",#"=",195)], [10, 21, 56]), ([], [10, 20, 56]), ([(#"=",#"=",193),
(#">",#">",194)], [10, 28, 56]), ([], [10, 27, 56]), ([(#"=",#"=",192)], [10, 29, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [10, 54, 56]), ([], [10, 15, 56]), ([], [10, 16, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",188)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",184)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"n",148),
(#"p",#"z",148),
(#"o",#"o",183)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"k",148),
(#"m",#"m",148),
(#"o",#"z",148),
(#"l",#"l",178),
(#"n",#"n",179)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"n",148),
(#"p",#"t",148),
(#"v",#"z",148),
(#"o",#"o",169),
(#"u",#"u",170)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"e",148),
(#"g",#"m",148),
(#"o",#"z",148),
(#"f",#"f",167),
(#"n",#"n",168)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",165)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"h",148),
(#"j",#"z",148),
(#"i",#"i",163)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"e",148),
(#"g",#"z",148),
(#"f",#"f",162)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"g",148),
(#"i",#"n",148),
(#"p",#"x",148),
(#"z",#"z",148),
(#"h",#"h",155),
(#"o",#"o",156),
(#"y",#"y",157)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"b",#"z",148),
(#"a",#"a",153)], [10, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"g",148),
(#"i",#"z",148),
(#"h",#"h",149)], [10, 54, 56]), ([], [10, 17, 56]), ([], [10, 34, 56]), ([], [10, 18, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"h",148),
(#"j",#"z",148),
(#"i",#"i",150)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"k",148),
(#"m",#"z",148),
(#"l",#"l",151)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",152)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [48, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",154)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [37, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",160)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [46, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"o",148),
(#"q",#"z",148),
(#"p",#"p",158)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",159)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [36, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"m",148),
(#"o",#"z",148),
(#"n",#"n",161)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [50, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [40, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"k",148),
(#"m",#"z",148),
(#"l",#"l",164)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [43, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"s",148),
(#"u",#"z",148),
(#"t",#"t",166)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [44, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [51, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [42, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",177)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"m",148),
(#"o",#"z",148),
(#"n",#"n",171)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"b",148),
(#"d",#"z",148),
(#"c",#"c",172)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"s",148),
(#"u",#"z",148),
(#"t",#"t",173)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"h",148),
(#"j",#"z",148),
(#"i",#"i",174)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"n",148),
(#"p",#"z",148),
(#"o",#"o",175)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"m",148),
(#"o",#"z",148),
(#"n",#"n",176)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [38, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [47, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"r",148),
(#"t",#"z",148),
(#"s",#"s",181)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"c",148),
(#"e",#"z",148),
(#"d",#"d",180)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [41, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",182)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [49, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [45, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",185)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"b",#"z",148),
(#"a",#"a",186)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"j",148),
(#"l",#"z",148),
(#"k",#"k",187)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [39, 54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",189)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"b",#"z",148),
(#"a",#"a",190)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"x",148),
(#"z",#"z",148),
(#"y",#"y",191)], [54]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [52, 54]), ([], [31]), ([], [32]), ([], [30]), ([], [35]), ([(#"0",#"9",196)], [53]), ([(#"*",#"*",197)], [8]), ([], [56]), ([], [12, 56]), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], [56]), ([], [33, 56]), ([], [13, 56]), ([], [14, 56]), ([], [24, 56]), ([], [26, 56]), ([], [22, 56]), ([], [23, 56]), ([], [19, 56]), ([(#"*",#"*",234)], [25, 56]), ([(#"0",#"9",196)], [53, 56]), ([(#"=",#"=",195)], [21, 56]), ([], [20, 56]), ([(#"=",#"=",193),
(#">",#">",194)], [28, 56]), ([], [27, 56]), ([(#"=",#"=",192)], [29, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [54, 56]), ([], [15, 56]), ([], [16, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",188)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",184)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"n",148),
(#"p",#"z",148),
(#"o",#"o",183)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"k",148),
(#"m",#"m",148),
(#"o",#"z",148),
(#"l",#"l",178),
(#"n",#"n",179)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"n",148),
(#"p",#"t",148),
(#"v",#"z",148),
(#"o",#"o",169),
(#"u",#"u",170)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"e",148),
(#"g",#"m",148),
(#"o",#"z",148),
(#"f",#"f",167),
(#"n",#"n",168)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",165)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"h",148),
(#"j",#"z",148),
(#"i",#"i",163)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"e",148),
(#"g",#"z",148),
(#"f",#"f",162)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"g",148),
(#"i",#"n",148),
(#"p",#"x",148),
(#"z",#"z",148),
(#"h",#"h",155),
(#"o",#"o",156),
(#"y",#"y",157)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"b",#"z",148),
(#"a",#"a",153)], [54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"g",148),
(#"i",#"z",148),
(#"h",#"h",149)], [54, 56]), ([], [17, 56]), ([], [34, 56]), ([], [18, 56]), ([], [1]), ([], [7, 56]), ([], [7, 12, 56]), ([], [0, 7, 11]), ([(#"\^@",#"!",92),
(#"#",#"[",92),
(#"]",#"\255",92),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], [7, 56]), ([], [7, 33, 56]), ([], [7, 13, 56]), ([], [7, 14, 56]), ([], [6, 24, 56]), ([], [7, 26, 56]), ([], [7, 22, 56]), ([], [7, 23, 56]), ([], [7, 19, 56]), ([(#"/",#"/",272)], [5, 25, 56]), ([(#"0",#"9",196)], [7, 53, 56]), ([(#"=",#"=",195)], [7, 21, 56]), ([], [7, 20, 56]), ([(#"=",#"=",193),
(#">",#">",194)], [7, 28, 56]), ([], [7, 27, 56]), ([(#"=",#"=",192)], [7, 29, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"z",148)], [7, 54, 56]), ([], [7, 15, 56]), ([], [7, 16, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",188)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"q",148),
(#"s",#"z",148),
(#"r",#"r",184)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"n",148),
(#"p",#"z",148),
(#"o",#"o",183)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"k",148),
(#"m",#"m",148),
(#"o",#"z",148),
(#"l",#"l",178),
(#"n",#"n",179)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"n",148),
(#"p",#"t",148),
(#"v",#"z",148),
(#"o",#"o",169),
(#"u",#"u",170)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"e",148),
(#"g",#"m",148),
(#"o",#"z",148),
(#"f",#"f",167),
(#"n",#"n",168)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"d",148),
(#"f",#"z",148),
(#"e",#"e",165)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"h",148),
(#"j",#"z",148),
(#"i",#"i",163)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"e",148),
(#"g",#"z",148),
(#"f",#"f",162)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"g",148),
(#"i",#"n",148),
(#"p",#"x",148),
(#"z",#"z",148),
(#"h",#"h",155),
(#"o",#"o",156),
(#"y",#"y",157)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"b",#"z",148),
(#"a",#"a",153)], [7, 54, 56]), ([(#"0",#"9",148),
(#"A",#"Z",148),
(#"_",#"_",148),
(#"a",#"g",148),
(#"i",#"z",148),
(#"h",#"h",149)], [7, 54, 56]), ([], [7, 17, 56]), ([], [7, 34, 56]), ([], [7, 18, 56]), ([(#"/",#"/",272)], [5])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as ()) = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; commentNest := !commentNest + 1; continue()))
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN B_COMMENT; continue()))
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN E_COMMENT; continue()))
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; commentNest:= !commentNest + 1; continue()))
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; continue()))
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm;
      (commentNest := !commentNest - 1; if !commentNest <= 0 then YYBEGIN INITIAL  else YYBEGIN COMMENT; continue()))
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; continue()))
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue()))
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LPAREN(		!lineNum, yypos - hd(!linePos))))
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RPAREN(		!lineNum, yypos - hd(!linePos))))
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LBRACK(		!lineNum, yypos - hd(!linePos))))
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RBRACK(		!lineNum, yypos - hd(!linePos))))
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LBRACE(		!lineNum, yypos - hd(!linePos))))
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RBRACE(		!lineNum, yypos - hd(!linePos))))
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DOT(		!lineNum, yypos - hd(!linePos))))
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.SEMICOLON(	!lineNum, yypos - hd(!linePos))))
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.COLON(		!lineNum, yypos - hd(!linePos))))
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.COMMA(		!lineNum, yypos - hd(!linePos))))
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.MINUS(		!lineNum, yypos - hd(!linePos))))
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TIMES(		!lineNum, yypos - hd(!linePos))))
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DIVIDE(		!lineNum, yypos - hd(!linePos))))
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.PLUS(		!lineNum, yypos - hd(!linePos))))
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.EQ(			!lineNum, yypos - hd(!linePos))))
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LT(			!lineNum, yypos - hd(!linePos))))
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.GT(			!lineNum, yypos - hd(!linePos))))
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.NEQ(		!lineNum, yypos - hd(!linePos))))
fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.GE(			!lineNum, yypos - hd(!linePos))))
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LE(			!lineNum, yypos - hd(!linePos))))
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.AND(		!lineNum, yypos - hd(!linePos))))
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.OR(			!lineNum, yypos - hd(!linePos))))
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ASSIGN(		!lineNum, yypos - hd(!linePos))))
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TYPE(		!lineNum, yypos - hd(!linePos))))
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.VAR(		!lineNum, yypos - hd(!linePos))))
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.FUNCTION(	!lineNum, yypos - hd(!linePos))))
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.BREAK(		!lineNum, yypos - hd(!linePos))))
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.OF(			!lineNum, yypos - hd(!linePos))))
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.END(		!lineNum, yypos - hd(!linePos))))
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.IN(			!lineNum, yypos - hd(!linePos))))
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.NIL(		!lineNum, yypos - hd(!linePos))))
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LET(		!lineNum, yypos - hd(!linePos))))
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DO(			!lineNum, yypos - hd(!linePos))))
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TO(			!lineNum, yypos - hd(!linePos))))
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.FOR(		!lineNum, yypos - hd(!linePos))))
fun yyAction48 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.WHILE(		!lineNum, yypos - hd(!linePos))))
fun yyAction49 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ELSE(		!lineNum, yypos - hd(!linePos))))
fun yyAction50 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.THEN(		!lineNum, yypos - hd(!linePos))))
fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.IF(			!lineNum, yypos - hd(!linePos))))
fun yyAction52 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ARRAY(		!lineNum, yypos - hd(!linePos))))
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (Tokens.INT( 
							Option.getOpt(Int.fromString(yytext),0),
									!lineNum, yypos - hd(!linePos)))
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ID(yytext, 	!lineNum, yypos - hd(!linePos)))
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (Tokens.STRING(
					substring(yytext,1,size(yytext)-2), 
									!lineNum, yypos - hd(!linePos)))
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        ((ErrorMsg.error yypos ("illegal character " ^ yytext));
				raise LexerException(!lineNum, yypos - hd(!linePos)))
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of COMMENT => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | E_COMMENT => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
        | B_COMMENT => yygo yyactTable (3, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    fun makeLexer' ins = mk (yyInput.mkStream ins)
    end

  end
