structure Mlex  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
COMMENT | E_COMMENT | INITIAL | B_COMMENT
    structure UserDeclarations = 
      struct

type pos = int
type lexresult = Tokens.token
exception lexerException of int * int
			
val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos
val commentNest = ref 0;
fun err(p1,p2) = ErrorMsg.error p1

    fun eof() = if !commentNest > 0 then raise lexerException(!lineNum, 0) else Tokens.EOF(!lineNum,0)





      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\b",4),
(#"\v",#"\^_",4),
(#"!",#"!",4),
(#"#",#"%",4),
(#"'",#"'",4),
(#"?",#"@",4),
(#"\\",#"\\",4),
(#"^",#"`",4),
(#"~",#"\255",4),
(#"\t",#"\t",5),
(#" ",#" ",5),
(#"\n",#"\n",6),
(#"\"",#"\"",7),
(#"&",#"&",8),
(#"(",#"(",9),
(#")",#")",10),
(#"*",#"*",11),
(#"+",#"+",12),
(#",",#",",13),
(#"-",#"-",14),
(#".",#".",15),
(#"/",#"/",16),
(#"0",#"9",17),
(#":",#":",18),
(#";",#";",19),
(#"<",#"<",20),
(#"=",#"=",21),
(#">",#">",22),
(#"A",#"Z",23),
(#"c",#"c",23),
(#"g",#"h",23),
(#"j",#"k",23),
(#"m",#"m",23),
(#"p",#"s",23),
(#"u",#"u",23),
(#"x",#"z",23),
(#"[",#"[",24),
(#"]",#"]",25),
(#"a",#"a",26),
(#"b",#"b",27),
(#"d",#"d",28),
(#"e",#"e",29),
(#"f",#"f",30),
(#"i",#"i",31),
(#"l",#"l",32),
(#"n",#"n",33),
(#"o",#"o",34),
(#"t",#"t",35),
(#"v",#"v",36),
(#"w",#"w",37),
(#"{",#"{",38),
(#"|",#"|",39),
(#"}",#"}",40)], [2]), ([(#"\^@",#"\b",109),
(#"\v",#"\^_",109),
(#"!",#"!",109),
(#"#",#"%",109),
(#"'",#"'",109),
(#"?",#"@",109),
(#"\\",#"\\",109),
(#"^",#"`",109),
(#"~",#"\255",109),
(#"\t",#"\t",110),
(#" ",#" ",110),
(#"\n",#"\n",111),
(#"\"",#"\"",112),
(#"&",#"&",113),
(#"(",#"(",114),
(#")",#")",115),
(#"*",#"*",116),
(#"+",#"+",117),
(#",",#",",118),
(#"-",#"-",119),
(#".",#".",120),
(#"/",#"/",121),
(#"0",#"9",122),
(#":",#":",123),
(#";",#";",124),
(#"<",#"<",125),
(#"=",#"=",126),
(#">",#">",127),
(#"A",#"Z",128),
(#"c",#"c",128),
(#"g",#"h",128),
(#"j",#"k",128),
(#"m",#"m",128),
(#"p",#"s",128),
(#"u",#"u",128),
(#"x",#"z",128),
(#"[",#"[",129),
(#"]",#"]",130),
(#"a",#"a",131),
(#"b",#"b",132),
(#"d",#"d",133),
(#"e",#"e",134),
(#"f",#"f",135),
(#"i",#"i",136),
(#"l",#"l",137),
(#"n",#"n",138),
(#"o",#"o",139),
(#"t",#"t",140),
(#"v",#"v",141),
(#"w",#"w",142),
(#"{",#"{",143),
(#"|",#"|",144),
(#"}",#"}",145)], [8]), ([(#"\^@",#"\b",202),
(#"\v",#"\^_",202),
(#"!",#"!",202),
(#"#",#"%",202),
(#"'",#"'",202),
(#"?",#"@",202),
(#"\\",#"\\",202),
(#"^",#"`",202),
(#"~",#"\255",202),
(#"\t",#"\t",203),
(#" ",#" ",203),
(#"\n",#"\n",6),
(#"\"",#"\"",204),
(#"&",#"&",205),
(#"(",#"(",206),
(#")",#")",207),
(#"*",#"*",208),
(#"+",#"+",209),
(#",",#",",210),
(#"-",#"-",211),
(#".",#".",212),
(#"/",#"/",213),
(#"0",#"9",214),
(#":",#":",215),
(#";",#";",216),
(#"<",#"<",217),
(#"=",#"=",218),
(#">",#">",219),
(#"A",#"Z",220),
(#"c",#"c",220),
(#"g",#"h",220),
(#"j",#"k",220),
(#"m",#"m",220),
(#"p",#"s",220),
(#"u",#"u",220),
(#"x",#"z",220),
(#"[",#"[",221),
(#"]",#"]",222),
(#"a",#"a",223),
(#"b",#"b",224),
(#"d",#"d",225),
(#"e",#"e",226),
(#"f",#"f",227),
(#"i",#"i",228),
(#"l",#"l",229),
(#"n",#"n",230),
(#"o",#"o",231),
(#"t",#"t",232),
(#"v",#"v",233),
(#"w",#"w",234),
(#"{",#"{",235),
(#"|",#"|",236),
(#"}",#"}",237)], []), ([(#"\^@",#"\b",239),
(#"\v",#"\^_",239),
(#"!",#"!",239),
(#"#",#"%",239),
(#"'",#"'",239),
(#"?",#"@",239),
(#"\\",#"\\",239),
(#"^",#"`",239),
(#"~",#"\255",239),
(#"\t",#"\t",240),
(#" ",#" ",240),
(#"\n",#"\n",241),
(#"\"",#"\"",242),
(#"&",#"&",243),
(#"(",#"(",244),
(#")",#")",245),
(#"*",#"*",246),
(#"+",#"+",247),
(#",",#",",248),
(#"-",#"-",249),
(#".",#".",250),
(#"/",#"/",251),
(#"0",#"9",252),
(#":",#":",253),
(#";",#";",254),
(#"<",#"<",255),
(#"=",#"=",256),
(#">",#">",257),
(#"A",#"Z",258),
(#"c",#"c",258),
(#"g",#"h",258),
(#"j",#"k",258),
(#"m",#"m",258),
(#"p",#"s",258),
(#"u",#"u",258),
(#"x",#"z",258),
(#"[",#"[",259),
(#"]",#"]",260),
(#"a",#"a",261),
(#"b",#"b",262),
(#"d",#"d",263),
(#"e",#"e",264),
(#"f",#"f",265),
(#"i",#"i",266),
(#"l",#"l",267),
(#"n",#"n",268),
(#"o",#"o",269),
(#"t",#"t",270),
(#"v",#"v",271),
(#"w",#"w",272),
(#"{",#"{",273),
(#"|",#"|",274),
(#"}",#"}",275)], [5]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 11, 57]), ([], [0]), ([(#"\^@",#"\t",97),
(#"\v",#"!",97),
(#"#",#")",97),
(#"+",#".",97),
(#"0",#"[",97),
(#"]",#"\255",97),
(#"\n",#"\n",98),
(#"*",#"*",98),
(#"/",#"/",98),
(#"\"",#"\"",99),
(#"\\",#"\\",100)], [2, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 32, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 12, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 13, 57]), ([], [4, 23, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 25, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 21, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"0",41),
(#":",#"\255",41),
(#"1",#"9",96)], [2, 22, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 18, 57]), ([], [3, 24, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"\255",41),
(#"0",#"9",95)], [2, 54, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"<",41),
(#">",#"\255",41),
(#"=",#"=",94)], [2, 20, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 19, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"<",41),
(#"?",#"\255",41),
(#"=",#"=",92),
(#">",#">",93)], [2, 27, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 26, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"<",41),
(#">",#"\255",41),
(#"=",#"=",91)], [2, 28, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 14, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 15, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"t",#"z",42),
(#"r",#"r",82),
(#"s",#"s",83)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",78)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"z",42),
(#"o",#"o",77)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"m",42),
(#"o",#"z",42),
(#"l",#"l",72),
(#"n",#"n",73)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"t",42),
(#"v",#"z",42),
(#"o",#"o",63),
(#"u",#"u",64)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"e",42),
(#"g",#"m",42),
(#"o",#"z",42),
(#"f",#"f",61),
(#"n",#"n",62)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",59)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",57)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"e",42),
(#"g",#"z",42),
(#"f",#"f",56)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"g",42),
(#"i",#"n",42),
(#"p",#"x",42),
(#"z",#"z",42),
(#"h",#"h",49),
(#"o",#"o",50),
(#"y",#"y",51)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",47)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"g",42),
(#"i",#"z",42),
(#"h",#"h",43)], [2, 55, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 16, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 33, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 17, 57]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",44)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"z",42),
(#"l",#"l",45)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",46)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 47, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",48)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 36, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",54)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 45, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"o",42),
(#"q",#"z",42),
(#"p",#"p",52)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",53)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 35, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",55)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 49, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 39, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"k",42),
(#"m",#"z",42),
(#"l",#"l",58)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 42, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"s",42),
(#"u",#"z",42),
(#"t",#"t",60)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 43, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 50, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 41, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",71)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",65)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"b",42),
(#"d",#"z",42),
(#"c",#"c",66)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"s",42),
(#"u",#"z",42),
(#"t",#"t",67)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",68)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"n",42),
(#"p",#"z",42),
(#"o",#"o",69)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",70)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 37, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 46, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"r",42),
(#"t",#"z",42),
(#"s",#"s",75)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"c",42),
(#"e",#"z",42),
(#"d",#"d",74)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 40, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",76)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 48, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 44, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"d",42),
(#"f",#"z",42),
(#"e",#"e",79)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",80)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"j",42),
(#"l",#"z",42),
(#"k",#"k",81)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 38, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"q",42),
(#"s",#"z",42),
(#"r",#"r",88)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"r",42),
(#"t",#"z",42),
(#"s",#"s",84)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"h",42),
(#"j",#"z",42),
(#"i",#"i",85)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"f",42),
(#"h",#"z",42),
(#"g",#"g",86)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"m",42),
(#"o",#"z",42),
(#"n",#"n",87)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 52, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"b",#"z",42),
(#"a",#"a",89)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"x",42),
(#"z",#"z",42),
(#"y",#"y",90)], [2, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"@",41),
(#"[",#"^",41),
(#"`",#"`",41),
(#"{",#"\255",41),
(#"0",#"9",42),
(#"A",#"Z",42),
(#"_",#"_",42),
(#"a",#"z",42)], [2, 51, 55]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 30]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 31]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 29]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 34]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"\255",41),
(#"0",#"9",95)], [2, 54]), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#":",#"\255",41),
(#"0",#"9",96)], [2, 53]), ([(#"\^@",#"\t",97),
(#"\v",#"!",97),
(#"#",#")",97),
(#"+",#".",97),
(#"0",#"[",97),
(#"]",#"\255",97),
(#"\n",#"\n",98),
(#"*",#"*",98),
(#"/",#"/",98),
(#"\"",#"\"",99),
(#"\\",#"\\",100)], [2]), ([(#"\^@",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#"\"",#"\"",104),
(#"\\",#"\\",105)], []), ([(#"\^@",#"\t",41),
(#"\v",#")",41),
(#"+",#".",41),
(#"0",#"\255",41)], [2, 56]), ([(#"\^@",#"\t",97),
(#"\v",#"\^_",97),
(#"!",#"!",97),
(#"#",#")",97),
(#"+",#".",97),
(#"0",#"[",97),
(#"]",#"\255",97),
(#"\n",#"\n",98),
(#"*",#"*",98),
(#"/",#"/",98),
(#" ",#" ",101),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], [2]), ([(#"\^@",#"\t",97),
(#"\v",#"\^_",97),
(#"!",#"!",97),
(#"#",#")",97),
(#"+",#".",97),
(#"0",#"[",97),
(#"]",#"\255",97),
(#"\n",#"\n",98),
(#"*",#"*",98),
(#"/",#"/",98),
(#" ",#" ",101),
(#"\"",#"\"",99),
(#"\\",#"\\",103)], [2]), ([(#"\^@",#"\t",97),
(#"\v",#"!",97),
(#"#",#")",97),
(#"+",#".",97),
(#"0",#"[",97),
(#"]",#"\255",97),
(#"\n",#"\n",98),
(#"*",#"*",98),
(#"/",#"/",98),
(#"\"",#"\"",99),
(#"\\",#"\\",100)], [2, 56]), ([(#"\^@",#"\t",97),
(#"\v",#"\^_",97),
(#"!",#"!",97),
(#"#",#")",97),
(#"+",#".",97),
(#"0",#"[",97),
(#"]",#"\255",97),
(#"\n",#"\n",98),
(#"*",#"*",98),
(#"/",#"/",98),
(#" ",#" ",101),
(#"\"",#"\"",102),
(#"\\",#"\\",103)], [2]), ([], [56]), ([(#"\^@",#"\^_",98),
(#"!",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#" ",#" ",106),
(#"\"",#"\"",107),
(#"\\",#"\\",108)], []), ([(#"\^@",#"\^_",98),
(#"!",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#" ",#" ",106),
(#"\"",#"\"",104),
(#"\\",#"\\",108)], []), ([(#"\^@",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#"\"",#"\"",104),
(#"\\",#"\\",105)], [56]), ([(#"\^@",#"\^_",98),
(#"!",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#" ",#" ",106),
(#"\"",#"\"",107),
(#"\\",#"\\",108)], []), ([], [10, 57]), ([], [10, 11, 57]), ([], [0, 10]), ([(#"\^@",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#"\"",#"\"",104),
(#"\\",#"\\",105)], [10, 57]), ([], [10, 32, 57]), ([], [10, 12, 57]), ([], [10, 13, 57]), ([(#"*",#"*",201)], [8, 23, 57]), ([], [10, 25, 57]), ([], [10, 21, 57]), ([(#"1",#"9",200)], [10, 22, 57]), ([], [10, 18, 57]), ([], [9, 24, 57]), ([(#"0",#"9",199)], [10, 54, 57]), ([(#"=",#"=",198)], [10, 20, 57]), ([], [10, 19, 57]), ([(#"=",#"=",196),
(#">",#">",197)], [10, 27, 57]), ([], [10, 26, 57]), ([(#"=",#"=",195)], [10, 28, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [10, 55, 57]), ([], [10, 14, 57]), ([], [10, 15, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"t",#"z",146),
(#"r",#"r",186),
(#"s",#"s",187)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"s",#"z",146),
(#"r",#"r",182)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"n",146),
(#"p",#"z",146),
(#"o",#"o",181)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"k",146),
(#"m",#"m",146),
(#"o",#"z",146),
(#"l",#"l",176),
(#"n",#"n",177)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"n",146),
(#"p",#"t",146),
(#"v",#"z",146),
(#"o",#"o",167),
(#"u",#"u",168)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"e",146),
(#"g",#"m",146),
(#"o",#"z",146),
(#"f",#"f",165),
(#"n",#"n",166)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",163)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"h",146),
(#"j",#"z",146),
(#"i",#"i",161)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"e",146),
(#"g",#"z",146),
(#"f",#"f",160)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"g",146),
(#"i",#"n",146),
(#"p",#"x",146),
(#"z",#"z",146),
(#"h",#"h",153),
(#"o",#"o",154),
(#"y",#"y",155)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"b",#"z",146),
(#"a",#"a",151)], [10, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"g",146),
(#"i",#"z",146),
(#"h",#"h",147)], [10, 55, 57]), ([], [10, 16, 57]), ([], [10, 33, 57]), ([], [10, 17, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"h",146),
(#"j",#"z",146),
(#"i",#"i",148)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"k",146),
(#"m",#"z",146),
(#"l",#"l",149)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",150)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [47, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"s",#"z",146),
(#"r",#"r",152)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [36, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",158)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [45, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"o",146),
(#"q",#"z",146),
(#"p",#"p",156)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",157)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [35, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"m",146),
(#"o",#"z",146),
(#"n",#"n",159)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [49, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [39, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"k",146),
(#"m",#"z",146),
(#"l",#"l",162)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [42, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"s",146),
(#"u",#"z",146),
(#"t",#"t",164)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [43, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [50, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [41, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"s",#"z",146),
(#"r",#"r",175)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"m",146),
(#"o",#"z",146),
(#"n",#"n",169)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"b",146),
(#"d",#"z",146),
(#"c",#"c",170)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"s",146),
(#"u",#"z",146),
(#"t",#"t",171)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"h",146),
(#"j",#"z",146),
(#"i",#"i",172)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"n",146),
(#"p",#"z",146),
(#"o",#"o",173)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"m",146),
(#"o",#"z",146),
(#"n",#"n",174)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [37, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [46, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"r",146),
(#"t",#"z",146),
(#"s",#"s",179)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"c",146),
(#"e",#"z",146),
(#"d",#"d",178)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [40, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",180)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [48, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [44, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",183)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"b",#"z",146),
(#"a",#"a",184)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"j",146),
(#"l",#"z",146),
(#"k",#"k",185)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [38, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"s",#"z",146),
(#"r",#"r",192)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"r",146),
(#"t",#"z",146),
(#"s",#"s",188)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"h",146),
(#"j",#"z",146),
(#"i",#"i",189)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"f",146),
(#"h",#"z",146),
(#"g",#"g",190)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"m",146),
(#"o",#"z",146),
(#"n",#"n",191)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [52, 55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"b",#"z",146),
(#"a",#"a",193)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"x",146),
(#"z",#"z",146),
(#"y",#"y",194)], [55]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [51, 55]), ([], [30]), ([], [31]), ([], [29]), ([], [34]), ([(#"0",#"9",199)], [54]), ([(#"0",#"9",200)], [53]), ([(#"*",#"*",201)], [8]), ([], [57]), ([], [11, 57]), ([(#"\^@",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#"\"",#"\"",104),
(#"\\",#"\\",105)], [57]), ([], [32, 57]), ([], [12, 57]), ([], [13, 57]), ([], [23, 57]), ([], [25, 57]), ([], [21, 57]), ([(#"1",#"9",200)], [22, 57]), ([], [18, 57]), ([(#"*",#"*",238)], [24, 57]), ([(#"0",#"9",199)], [54, 57]), ([(#"=",#"=",198)], [20, 57]), ([], [19, 57]), ([(#"=",#"=",196),
(#">",#">",197)], [27, 57]), ([], [26, 57]), ([(#"=",#"=",195)], [28, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [55, 57]), ([], [14, 57]), ([], [15, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"t",#"z",146),
(#"r",#"r",186),
(#"s",#"s",187)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"s",#"z",146),
(#"r",#"r",182)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"n",146),
(#"p",#"z",146),
(#"o",#"o",181)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"k",146),
(#"m",#"m",146),
(#"o",#"z",146),
(#"l",#"l",176),
(#"n",#"n",177)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"n",146),
(#"p",#"t",146),
(#"v",#"z",146),
(#"o",#"o",167),
(#"u",#"u",168)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"e",146),
(#"g",#"m",146),
(#"o",#"z",146),
(#"f",#"f",165),
(#"n",#"n",166)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",163)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"h",146),
(#"j",#"z",146),
(#"i",#"i",161)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"e",146),
(#"g",#"z",146),
(#"f",#"f",160)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"g",146),
(#"i",#"n",146),
(#"p",#"x",146),
(#"z",#"z",146),
(#"h",#"h",153),
(#"o",#"o",154),
(#"y",#"y",155)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"b",#"z",146),
(#"a",#"a",151)], [55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"g",146),
(#"i",#"z",146),
(#"h",#"h",147)], [55, 57]), ([], [16, 57]), ([], [33, 57]), ([], [17, 57]), ([], [1]), ([], [7, 57]), ([], [7, 11, 57]), ([], [0, 7]), ([(#"\^@",#"!",98),
(#"#",#"[",98),
(#"]",#"\255",98),
(#"\"",#"\"",104),
(#"\\",#"\\",105)], [7, 57]), ([], [7, 32, 57]), ([], [7, 12, 57]), ([], [7, 13, 57]), ([], [6, 23, 57]), ([], [7, 25, 57]), ([], [7, 21, 57]), ([(#"1",#"9",200)], [7, 22, 57]), ([], [7, 18, 57]), ([(#"/",#"/",276)], [5, 24, 57]), ([(#"0",#"9",199)], [7, 54, 57]), ([(#"=",#"=",198)], [7, 20, 57]), ([], [7, 19, 57]), ([(#"=",#"=",196),
(#">",#">",197)], [7, 27, 57]), ([], [7, 26, 57]), ([(#"=",#"=",195)], [7, 28, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"z",146)], [7, 55, 57]), ([], [7, 14, 57]), ([], [7, 15, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"t",#"z",146),
(#"r",#"r",186),
(#"s",#"s",187)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"q",146),
(#"s",#"z",146),
(#"r",#"r",182)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"n",146),
(#"p",#"z",146),
(#"o",#"o",181)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"k",146),
(#"m",#"m",146),
(#"o",#"z",146),
(#"l",#"l",176),
(#"n",#"n",177)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"n",146),
(#"p",#"t",146),
(#"v",#"z",146),
(#"o",#"o",167),
(#"u",#"u",168)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"e",146),
(#"g",#"m",146),
(#"o",#"z",146),
(#"f",#"f",165),
(#"n",#"n",166)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"d",146),
(#"f",#"z",146),
(#"e",#"e",163)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"h",146),
(#"j",#"z",146),
(#"i",#"i",161)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"e",146),
(#"g",#"z",146),
(#"f",#"f",160)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"g",146),
(#"i",#"n",146),
(#"p",#"x",146),
(#"z",#"z",146),
(#"h",#"h",153),
(#"o",#"o",154),
(#"y",#"y",155)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"b",#"z",146),
(#"a",#"a",151)], [7, 55, 57]), ([(#"0",#"9",146),
(#"A",#"Z",146),
(#"_",#"_",146),
(#"a",#"g",146),
(#"i",#"z",146),
(#"h",#"h",147)], [7, 55, 57]), ([], [7, 16, 57]), ([], [7, 33, 57]), ([], [7, 17, 57]), ([(#"/",#"/",276)], [5])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as ()) = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; commentNest := !commentNest + 1; continue()))
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN B_COMMENT; continue()))
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN E_COMMENT; continue()))
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; commentNest:= !commentNest + 1; continue()))
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; continue()))
fun yyAction8 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm;
      (commentNest := !commentNest - 1; if !commentNest <= 0 then YYBEGIN INITIAL  else YYBEGIN COMMENT; continue()))
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; continue()))
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm;
      (linePos := yypos :: !linePos; continue()))
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LPAREN(!lineNum, yypos - hd(!linePos))))
fun yyAction13 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RPAREN(!lineNum, yypos - hd(!linePos))))
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LBRACE(!lineNum, yypos - hd(!linePos))))
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RBRACE(!lineNum, yypos - hd(!linePos))))
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LBRACK(!lineNum, yypos - hd(!linePos))))
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RBRACK(!lineNum, yypos - hd(!linePos))))
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DOT(!lineNum, yypos - hd(!linePos))))
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.SEMICOLON(!lineNum, yypos - hd(!linePos))))
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.COLON(!lineNum, yypos - hd(!linePos))))
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.COMMA(!lineNum, yypos - hd(!linePos))))
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.MINUS(!lineNum, yypos - hd(!linePos))))
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TIMES(!lineNum, yypos - hd(!linePos))))
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DIVIDE(!lineNum, yypos - hd(!linePos))))
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.PLUS(!lineNum, yypos - hd(!linePos))))
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.EQ(!lineNum, yypos - hd(!linePos))))
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LT(!lineNum, yypos - hd(!linePos))))
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.GT(!lineNum, yypos - hd(!linePos))))
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.NEQ(!lineNum, yypos - hd(!linePos))))
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.GE(!lineNum, yypos - hd(!linePos))))
fun yyAction31 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LE(!lineNum, yypos - hd(!linePos))))
fun yyAction32 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.AND(!lineNum, yypos - hd(!linePos))))
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.OR(!lineNum, yypos - hd(!linePos))))
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ASSIGN(!lineNum, yypos - hd(!linePos))))
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TYPE(!lineNum, yypos - hd(!linePos))))
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.VAR(!lineNum, yypos - hd(!linePos))))
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.FUNCTION(!lineNum, yypos - hd(!linePos))))
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.BREAK(!lineNum, yypos - hd(!linePos))))
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.OF(!lineNum, yypos - hd(!linePos))))
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.END(!lineNum, yypos - hd(!linePos))))
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.IN(!lineNum, yypos - hd(!linePos))))
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.NIL(!lineNum, yypos - hd(!linePos))))
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LET(!lineNum, yypos - hd(!linePos))))
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DO(!lineNum, yypos - hd(!linePos))))
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TO(!lineNum, yypos - hd(!linePos))))
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.FOR(!lineNum, yypos - hd(!linePos))))
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.WHILE(!lineNum, yypos - hd(!linePos))))
fun yyAction48 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ELSE(!lineNum, yypos - hd(!linePos))))
fun yyAction49 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.THEN(!lineNum, yypos - hd(!linePos))))
fun yyAction50 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.IF(!lineNum, yypos - hd(!linePos))))
fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ARRAY(!lineNum, yypos - hd(!linePos))))
fun yyAction52 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ASSIGN(!lineNum, yypos - hd(!linePos))))
fun yyAction53 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (Tokens.INT( Option.getOpt(Int.fromString(yytext),0), !lineNum, yypos - hd(!linePos)))
      end
fun yyAction54 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (Tokens.INT( Option.getOpt(Int.fromString(yytext),0), !lineNum, yypos - hd(!linePos)))
      end
fun yyAction55 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ID(yytext, !lineNum, yypos - hd(!linePos)))
      end
fun yyAction56 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.STRING(yytext, !lineNum, yypos - hd(!linePos)))
      end
fun yyAction57 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        ((ErrorMsg.error yypos ("illegal character " ^ yytext)); raise lexerException(!lineNum, yypos - hd(!linePos)))
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of COMMENT => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | E_COMMENT => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
        | B_COMMENT => yygo yyactTable (3, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    fun makeLexer' ins = mk (yyInput.mkStream ins)
    end

  end
