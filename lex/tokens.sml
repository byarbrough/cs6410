structure Tokens : Tiger_TOKENS =
struct
  (* A "scaffold" structure for debugging lexers. *)

type linenum = int
type token = string
fun TYPE(i,j) = "TYPE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun VAR(i,j) = "VAR   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun FUNCTION(i,j) = "FUNCTION   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun BREAK(i,j) = "BREAK   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun OF(i,j) = "OF   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun END(i,j) = "END   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun IN(i,j) = "IN   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun NIL(i,j) = "NIL   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun LET(i,j) = "LET   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun DO(i,j) = "DO   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun TO(i,j) = "TO   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun FOR(i,j) = "FOR   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun WHILE(i,j) = "WHILE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun ELSE(i,j) = "ELSE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun THEN(i,j) = "THEN   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun IF(i,j) = "IF   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun ARRAY(i,j) = "ARRAY   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun ASSIGN(i,j) = "ASSIGN   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun OR(i,j) = "OR   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun AND(i,j) = "AND   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun GE(i,j) = "GE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun GT(i,j) = "GT   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun LE(i,j) = "LE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun LT(i,j) = "LT   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun NEQ(i,j) = "NEQ   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun EQ(i,j) = "EQ   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun DIVIDE(i,j) = "DIVIDE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun TIMES(i,j) = "TIMES   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun MINUS(i,j) = "MINUS   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun PLUS(i,j) = "PLUS   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun DOT(i,j) = "DOT   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun RBRACE(i,j) = "RBRACE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun LBRACE(i,j) = "LBRACE   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun RBRACK(i,j) = "RBRACK   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun LBRACK(i,j) = "LBRACK   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun RPAREN(i,j) = "RPAREN   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun LPAREN(i,j) = "LPAREN   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun SEMICOLON(i,j) = "SEMICOLON   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun COLON(i,j) = "COLON   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun COMMA(i,j) = "COMMA   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun STRING(s,i,j) = "STRING("^s^")     row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun INT(c,i,j) = "INT("^Int.toString(c)^")   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun ID(s,i,j) = "ID("^s^")     row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
fun EOF(i,j) = "EOF   row: " ^ Int.toString(i) ^ " col: " ^ Int.toString(j)
end
