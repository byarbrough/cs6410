49 shift/reduce conflicts

error:  state 89: shift/reduce conflict (shift OR, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift AND, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift GE, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift GT, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift LE, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift LT, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift NEQ, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift EQ, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift DIVIDE, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift TIMES, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift MINUS, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift PLUS, reduce by rule 34)
error:  state 90: shift/reduce conflict (shift ELSE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift OR, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift AND, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift GE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift GT, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift LE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift LT, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift NEQ, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift EQ, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift DIVIDE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift TIMES, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift MINUS, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift PLUS, reduce by rule 33)
error:  state 126: shift/reduce conflict (shift OR, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift AND, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift GE, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift GT, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift LE, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift LT, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift NEQ, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift EQ, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift DIVIDE, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift TIMES, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift MINUS, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift PLUS, reduce by rule 36)
error:  state 141: shift/reduce conflict (shift OR, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift AND, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift GE, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift GT, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift LE, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift LT, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift NEQ, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift EQ, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift DIVIDE, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift TIMES, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift MINUS, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift PLUS, reduce by rule 35)

state 0:

	program : . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 10
	program	goto 151
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 1:

	exp : record .  (reduce by rule 11)



	.	reduce by rule 11


state 2:

	exp : assignment .  (reduce by rule 10)



	.	reduce by rule 10


state 3:

	exp : funcall .  (reduce by rule 9)



	.	reduce by rule 9


state 4:

	exp : literal .  (reduce by rule 1)



	.	reduce by rule 1


state 5:

	exp : lets .  (reduce by rule 7)



	.	reduce by rule 7


state 6:

	exp : array .  (reduce by rule 5)



	.	reduce by rule 5


state 7:

	exp : cond .  (reduce by rule 6)



	.	reduce by rule 6


state 8:

	exp : opexp .  (reduce by rule 3)



	.	reduce by rule 3


state 9:

	exp : lvalue .  (reduce by rule 8)
	assignment : lvalue . ASSIGN exp 

	ASSIGN	shift 22


	.	reduce by rule 8


state 10:

	program : exp .  (reduce by rule 0)
	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 0


state 11:

	literal : NIL .  (reduce by rule 12)



	.	reduce by rule 12


state 12:

	literal : BREAK .  (reduce by rule 15)



	.	reduce by rule 15


state 13:

	lets : LET . decs IN seqexp END 

	FUNCTION	shift 42
	VAR	shift 41
	TYPE	shift 40

	decs	goto 39
	dec	goto 38
	tydec	goto 37
	vardec	goto 36
	fundec	goto 35

	.	reduce by rule 48


state 14:

	cond : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 43


	.	error


state 15:

	cond : WHILE . exp DO exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 44
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 16:

	cond : IF . exp THEN exp ELSE exp 
	cond : IF . exp THEN exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 45
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 17:

	exp : MINUS . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 46
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 18:

	exp : LPAREN . seqexp RPAREN 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 48
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	seqexp	goto 47
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	reduce by rule 16


state 19:

	literal : STRING .  (reduce by rule 14)



	.	reduce by rule 14


state 20:

	literal : INT .  (reduce by rule 13)



	.	reduce by rule 13


state 21:

	lvalue : ID . lvalueCont 
	array : ID . LBRACK exp RBRACK OF exp 
	funcall : ID . LPAREN argseq RPAREN 
	record : ID . LBRACE ID EQ exp recarg RBRACE 

	LPAREN	shift 53
	LBRACK	shift 52
	LBRACE	shift 51
	DOT	shift 50

	lvalueCont	goto 49

	.	reduce by rule 65


state 22:

	assignment : lvalue ASSIGN . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 54
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 23:

	opexp : exp OR . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 55
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 24:

	opexp : exp AND . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 56
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 25:

	opexp : exp GE . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 57
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 26:

	opexp : exp GT . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 58
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 27:

	opexp : exp LE . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 59
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 28:

	opexp : exp LT . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 60
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 29:

	opexp : exp NEQ . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 61
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 30:

	opexp : exp EQ . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 62
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 31:

	opexp : exp DIVIDE . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 63
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 32:

	opexp : exp TIMES . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 64
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 33:

	opexp : exp MINUS . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 65
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 34:

	opexp : exp PLUS . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 66
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 35:

	dec : fundec .  (reduce by rule 51)



	.	reduce by rule 51


state 36:

	dec : vardec .  (reduce by rule 50)



	.	reduce by rule 50


state 37:

	dec : tydec .  (reduce by rule 49)



	.	reduce by rule 49


state 38:

	decs : dec . decs 

	FUNCTION	shift 42
	VAR	shift 41
	TYPE	shift 40

	decs	goto 67
	dec	goto 38
	tydec	goto 37
	vardec	goto 36
	fundec	goto 35

	.	reduce by rule 48


state 39:

	lets : LET decs . IN seqexp END 

	IN	shift 68


	.	error


state 40:

	tydec : TYPE . ID EQ ty 

	ID	shift 69


	.	error


state 41:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 70


	.	error


state 42:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 71


	.	error


state 43:

	cond : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 72


	.	error


state 44:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : WHILE exp . DO exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23
	DO	shift 73


	.	error


state 45:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : IF exp . THEN exp ELSE exp 
	cond : IF exp . THEN exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23
	THEN	shift 74


	.	error


state 46:

	exp : MINUS exp .  (reduce by rule 4)
	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 



	.	reduce by rule 4


state 47:

	exp : LPAREN seqexp . RPAREN 

	RPAREN	shift 75


	.	error


state 48:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	seqexp : exp . seqexpcont 

	SEMICOLON	shift 77
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23

	seqexpcont	goto 76

	.	reduce by rule 18


state 49:

	lvalue : ID lvalueCont .  (reduce by rule 64)



	.	reduce by rule 64


state 50:

	lvalueCont : DOT . ID lvalueCont 

	ID	shift 78


	.	error


state 51:

	record : ID LBRACE . ID EQ exp recarg RBRACE 

	ID	shift 79


	.	error


state 52:

	array : ID LBRACK . exp RBRACK OF exp 
	lvalueCont : LBRACK . exp RBRACK lvalueCont 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 80
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 53:

	funcall : ID LPAREN . argseq RPAREN 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 82
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	argseq	goto 81
	assignment	goto 2
	record	goto 1

	.	reduce by rule 39


state 54:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	assignment : lvalue ASSIGN exp .  (reduce by rule 43)

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 43


state 55:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp OR exp .  (reduce by rule 21)
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24


	.	reduce by rule 21


state 56:

	opexp : exp . AND exp 
	opexp : exp AND exp .  (reduce by rule 20)
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25


	.	reduce by rule 20


state 57:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp GE exp .  (reduce by rule 22)
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	EOF	reduce by rule 22
	COMMA	reduce by rule 22
	SEMICOLON	reduce by rule 22
	RPAREN	reduce by rule 22
	RBRACK	reduce by rule 22
	RBRACE	reduce by rule 22
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 22
	OR	reduce by rule 22
	THEN	reduce by rule 22
	ELSE	reduce by rule 22
	TO	reduce by rule 22
	DO	reduce by rule 22
	IN	reduce by rule 22
	END	reduce by rule 22
	FUNCTION	reduce by rule 22
	VAR	reduce by rule 22
	TYPE	reduce by rule 22


	.	error


state 58:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp GT exp .  (reduce by rule 23)
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	EOF	reduce by rule 23
	COMMA	reduce by rule 23
	SEMICOLON	reduce by rule 23
	RPAREN	reduce by rule 23
	RBRACK	reduce by rule 23
	RBRACE	reduce by rule 23
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 23
	OR	reduce by rule 23
	THEN	reduce by rule 23
	ELSE	reduce by rule 23
	TO	reduce by rule 23
	DO	reduce by rule 23
	IN	reduce by rule 23
	END	reduce by rule 23
	FUNCTION	reduce by rule 23
	VAR	reduce by rule 23
	TYPE	reduce by rule 23


	.	error


state 59:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp LE exp .  (reduce by rule 24)
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	EOF	reduce by rule 24
	COMMA	reduce by rule 24
	SEMICOLON	reduce by rule 24
	RPAREN	reduce by rule 24
	RBRACK	reduce by rule 24
	RBRACE	reduce by rule 24
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 24
	OR	reduce by rule 24
	THEN	reduce by rule 24
	ELSE	reduce by rule 24
	TO	reduce by rule 24
	DO	reduce by rule 24
	IN	reduce by rule 24
	END	reduce by rule 24
	FUNCTION	reduce by rule 24
	VAR	reduce by rule 24
	TYPE	reduce by rule 24


	.	error


state 60:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp LT exp .  (reduce by rule 25)
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	EOF	reduce by rule 25
	COMMA	reduce by rule 25
	SEMICOLON	reduce by rule 25
	RPAREN	reduce by rule 25
	RBRACK	reduce by rule 25
	RBRACE	reduce by rule 25
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 25
	OR	reduce by rule 25
	THEN	reduce by rule 25
	ELSE	reduce by rule 25
	TO	reduce by rule 25
	DO	reduce by rule 25
	IN	reduce by rule 25
	END	reduce by rule 25
	FUNCTION	reduce by rule 25
	VAR	reduce by rule 25
	TYPE	reduce by rule 25


	.	error


state 61:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp NEQ exp .  (reduce by rule 26)
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	EOF	reduce by rule 26
	COMMA	reduce by rule 26
	SEMICOLON	reduce by rule 26
	RPAREN	reduce by rule 26
	RBRACK	reduce by rule 26
	RBRACE	reduce by rule 26
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 26
	OR	reduce by rule 26
	THEN	reduce by rule 26
	ELSE	reduce by rule 26
	TO	reduce by rule 26
	DO	reduce by rule 26
	IN	reduce by rule 26
	END	reduce by rule 26
	FUNCTION	reduce by rule 26
	VAR	reduce by rule 26
	TYPE	reduce by rule 26


	.	error


state 62:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp EQ exp .  (reduce by rule 27)
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	EOF	reduce by rule 27
	COMMA	reduce by rule 27
	SEMICOLON	reduce by rule 27
	RPAREN	reduce by rule 27
	RBRACK	reduce by rule 27
	RBRACE	reduce by rule 27
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	AND	reduce by rule 27
	OR	reduce by rule 27
	THEN	reduce by rule 27
	ELSE	reduce by rule 27
	TO	reduce by rule 27
	DO	reduce by rule 27
	IN	reduce by rule 27
	END	reduce by rule 27
	FUNCTION	reduce by rule 27
	VAR	reduce by rule 27
	TYPE	reduce by rule 27


	.	error


state 63:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	opexp : exp DIVIDE exp .  (reduce by rule 31)



	.	reduce by rule 31


state 64:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp TIMES exp .  (reduce by rule 30)
	opexp : exp . DIVIDE exp 



	.	reduce by rule 30


state 65:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp MINUS exp .  (reduce by rule 29)
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	TIMES	shift 32
	DIVIDE	shift 31


	.	reduce by rule 29


state 66:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp PLUS exp .  (reduce by rule 28)
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	TIMES	shift 32
	DIVIDE	shift 31


	.	reduce by rule 28


state 67:

	decs : dec decs .  (reduce by rule 47)



	.	reduce by rule 47


state 68:

	lets : LET decs IN . seqexp END 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 48
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	seqexp	goto 83
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	reduce by rule 16


state 69:

	tydec : TYPE ID . EQ ty 

	EQ	shift 84


	.	error


state 70:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 86
	ASSIGN	shift 85


	.	error


state 71:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 87


	.	error


state 72:

	cond : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 88
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 73:

	cond : WHILE exp DO . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 89
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 74:

	cond : IF exp THEN . exp ELSE exp 
	cond : IF exp THEN . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 90
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 75:

	exp : LPAREN seqexp RPAREN .  (reduce by rule 2)



	.	reduce by rule 2


state 76:

	seqexp : exp seqexpcont .  (reduce by rule 17)



	.	reduce by rule 17


state 77:

	seqexpcont : SEMICOLON . exp seqexpcont 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 91
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 78:

	lvalueCont : DOT ID . lvalueCont 

	LBRACK	shift 93
	DOT	shift 50

	lvalueCont	goto 92

	.	reduce by rule 65


state 79:

	record : ID LBRACE ID . EQ exp recarg RBRACE 

	EQ	shift 94


	.	error


state 80:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	array : ID LBRACK exp . RBRACK OF exp 
	lvalueCont : LBRACK exp . RBRACK lvalueCont 

	RBRACK	shift 95
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	error


state 81:

	funcall : ID LPAREN argseq . RPAREN 

	RPAREN	shift 96


	.	error


state 82:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	argseq : exp . argseqcont 

	COMMA	shift 98
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23

	argseqcont	goto 97

	.	reduce by rule 41


state 83:

	lets : LET decs IN seqexp . END 

	END	shift 99


	.	error


state 84:

	tydec : TYPE ID EQ . ty 

	ID	shift 103
	LBRACE	shift 102
	ARRAY	shift 101

	ty	goto 100

	.	error


state 85:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 104
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 86:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 105


	.	error


state 87:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 107

	tyfields	goto 106

	.	reduce by rule 56


state 88:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : FOR ID ASSIGN exp . TO exp DO exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23
	TO	shift 108


	.	error

error:  state 89: shift/reduce conflict (shift OR, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift AND, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift GE, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift GT, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift LE, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift LT, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift NEQ, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift EQ, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift DIVIDE, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift TIMES, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift MINUS, reduce by rule 34)
error:  state 89: shift/reduce conflict (shift PLUS, reduce by rule 34)

state 89:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : WHILE exp DO exp .  (reduce by rule 34)

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 34

error:  state 90: shift/reduce conflict (shift ELSE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift OR, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift AND, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift GE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift GT, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift LE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift LT, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift NEQ, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift EQ, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift DIVIDE, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift TIMES, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift MINUS, reduce by rule 33)
error:  state 90: shift/reduce conflict (shift PLUS, reduce by rule 33)

state 90:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : IF exp THEN exp . ELSE exp 
	cond : IF exp THEN exp .  (reduce by rule 33)

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23
	ELSE	shift 109


	.	reduce by rule 33


state 91:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	seqexpcont : SEMICOLON exp . seqexpcont 

	SEMICOLON	shift 77
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23

	seqexpcont	goto 110

	.	reduce by rule 18


state 92:

	lvalueCont : DOT ID lvalueCont .  (reduce by rule 66)



	.	reduce by rule 66


state 93:

	lvalueCont : LBRACK . exp RBRACK lvalueCont 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 111
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 94:

	record : ID LBRACE ID EQ . exp recarg RBRACE 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 112
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 95:

	array : ID LBRACK exp RBRACK . OF exp 
	lvalueCont : LBRACK exp RBRACK . lvalueCont 

	LBRACK	shift 93
	DOT	shift 50
	OF	shift 114

	lvalueCont	goto 113

	.	reduce by rule 65


state 96:

	funcall : ID LPAREN argseq RPAREN .  (reduce by rule 38)



	.	reduce by rule 38


state 97:

	argseq : exp argseqcont .  (reduce by rule 40)



	.	reduce by rule 40


state 98:

	argseqcont : COMMA . exp argseqcont 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 115
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 99:

	lets : LET decs IN seqexp END .  (reduce by rule 37)



	.	reduce by rule 37


state 100:

	tydec : TYPE ID EQ ty .  (reduce by rule 52)



	.	reduce by rule 52


state 101:

	ty : ARRAY . OF ID 

	OF	shift 116


	.	error


state 102:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 107

	tyfields	goto 117

	.	reduce by rule 56


state 103:

	ty : ID .  (reduce by rule 53)



	.	reduce by rule 53


state 104:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 60)
	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 60


state 105:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 118


	.	error


state 106:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 119


	.	error


state 107:

	tyfields : ID . COLON ID tyfieldscont 

	COLON	shift 120


	.	error


state 108:

	cond : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 121
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 109:

	cond : IF exp THEN exp ELSE . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 122
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 110:

	seqexpcont : SEMICOLON exp seqexpcont .  (reduce by rule 19)



	.	reduce by rule 19


state 111:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	lvalueCont : LBRACK exp . RBRACK lvalueCont 

	RBRACK	shift 123
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	error


state 112:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	record : ID LBRACE ID EQ exp . recarg RBRACE 

	COMMA	shift 125
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23

	recarg	goto 124

	.	reduce by rule 45


state 113:

	lvalueCont : LBRACK exp RBRACK lvalueCont .  (reduce by rule 67)



	.	reduce by rule 67


state 114:

	array : ID LBRACK exp RBRACK OF . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 126
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 115:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	argseqcont : COMMA exp . argseqcont 

	COMMA	shift 98
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23

	argseqcont	goto 127

	.	reduce by rule 41


state 116:

	ty : ARRAY OF . ID 

	ID	shift 128


	.	error


state 117:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 129


	.	error


state 118:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 130
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 119:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 132
	EQ	shift 131


	.	error


state 120:

	tyfields : ID COLON . ID tyfieldscont 

	ID	shift 133


	.	error


state 121:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : FOR ID ASSIGN exp TO exp . DO exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23
	DO	shift 134


	.	error


state 122:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : IF exp THEN exp ELSE exp .  (reduce by rule 32)

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 32


state 123:

	lvalueCont : LBRACK exp RBRACK . lvalueCont 

	LBRACK	shift 93
	DOT	shift 50

	lvalueCont	goto 113

	.	reduce by rule 65


state 124:

	record : ID LBRACE ID EQ exp recarg . RBRACE 

	RBRACE	shift 135


	.	error


state 125:

	recarg : COMMA . ID EQ exp recarg 

	ID	shift 136


	.	error

error:  state 126: shift/reduce conflict (shift OR, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift AND, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift GE, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift GT, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift LE, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift LT, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift NEQ, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift EQ, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift DIVIDE, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift TIMES, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift MINUS, reduce by rule 36)
error:  state 126: shift/reduce conflict (shift PLUS, reduce by rule 36)

state 126:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	array : ID LBRACK exp RBRACK OF exp .  (reduce by rule 36)

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 36


state 127:

	argseqcont : COMMA exp argseqcont .  (reduce by rule 42)



	.	reduce by rule 42


state 128:

	ty : ARRAY OF ID .  (reduce by rule 55)



	.	reduce by rule 55


state 129:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 54)



	.	reduce by rule 54


state 130:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 61)
	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 61


state 131:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 137
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 132:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 138


	.	error


state 133:

	tyfields : ID COLON ID . tyfieldscont 

	COMMA	shift 140

	tyfieldscont	goto 139

	.	reduce by rule 58


state 134:

	cond : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 141
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 135:

	record : ID LBRACE ID EQ exp recarg RBRACE .  (reduce by rule 44)



	.	reduce by rule 44


state 136:

	recarg : COMMA ID . EQ exp recarg 

	EQ	shift 142


	.	error


state 137:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 62)
	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 62


state 138:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 143


	.	error


state 139:

	tyfields : ID COLON ID tyfieldscont .  (reduce by rule 57)



	.	reduce by rule 57


state 140:

	tyfieldscont : COMMA . ID COLON ID tyfieldscont 

	ID	shift 144


	.	error

error:  state 141: shift/reduce conflict (shift OR, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift AND, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift GE, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift GT, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift LE, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift LT, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift NEQ, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift EQ, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift DIVIDE, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift TIMES, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift MINUS, reduce by rule 35)
error:  state 141: shift/reduce conflict (shift PLUS, reduce by rule 35)

state 141:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	cond : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 35)

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 35


state 142:

	recarg : COMMA ID EQ . exp recarg 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 145
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 143:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 21
	INT	shift 20
	STRING	shift 19
	LPAREN	shift 18
	MINUS	shift 17
	IF	shift 16
	WHILE	shift 15
	FOR	shift 14
	LET	shift 13
	BREAK	shift 12
	NIL	shift 11

	exp	goto 146
	lvalue	goto 9
	opexp	goto 8
	cond	goto 7
	array	goto 6
	lets	goto 5
	literal	goto 4
	funcall	goto 3
	assignment	goto 2
	record	goto 1

	.	error


state 144:

	tyfieldscont : COMMA ID . COLON ID tyfieldscont 

	COLON	shift 147


	.	error


state 145:

	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 
	recarg : COMMA ID EQ exp . recarg 

	COMMA	shift 125
	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23

	recarg	goto 148

	.	reduce by rule 45


state 146:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 63)
	opexp : exp . AND exp 
	opexp : exp . OR exp 
	opexp : exp . GE exp 
	opexp : exp . GT exp 
	opexp : exp . LE exp 
	opexp : exp . LT exp 
	opexp : exp . NEQ exp 
	opexp : exp . EQ exp 
	opexp : exp . PLUS exp 
	opexp : exp . MINUS exp 
	opexp : exp . TIMES exp 
	opexp : exp . DIVIDE exp 

	PLUS	shift 34
	MINUS	shift 33
	TIMES	shift 32
	DIVIDE	shift 31
	EQ	shift 30
	NEQ	shift 29
	LT	shift 28
	LE	shift 27
	GT	shift 26
	GE	shift 25
	AND	shift 24
	OR	shift 23


	.	reduce by rule 63


state 147:

	tyfieldscont : COMMA ID COLON . ID tyfieldscont 

	ID	shift 149


	.	error


state 148:

	recarg : COMMA ID EQ exp recarg .  (reduce by rule 46)



	.	reduce by rule 46


state 149:

	tyfieldscont : COMMA ID COLON ID . tyfieldscont 

	COMMA	shift 140

	tyfieldscont	goto 150

	.	reduce by rule 58


state 150:

	tyfieldscont : COMMA ID COLON ID tyfieldscont .  (reduce by rule 59)



	.	reduce by rule 59


state 151:


	EOF	accept


	.	error

487 of 1059 action table entries left after compaction
399 goto table entries
