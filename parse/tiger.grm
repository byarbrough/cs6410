open Symbol
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp of Absyn.exp
		| program of Absyn.exp
		| decs of Absyn.dec list
		| dec of Absyn.dec 
		| tydec of Absyn.dec 
		| ty of Absyn.ty 
		| tyfields of Absyn.field list 
		| tyfieldscont of Absyn.field list 
		| vardec of Absyn.dec
		| fundec of Absyn.dec
		| lvalue of Absyn.var
		| opexp of Absyn.exp
		| cond  of Absyn.exp
		| array of Absyn.ArrayExp
		| seqexpcont of Absyn.SeqExp
		| seqexp of Absyn.SeqExp
		| lets of Absyn.LetExp
		| literal of Absyn.exp 
		| funcall of Absyn.CallExp
		| argseq of Absyn.exp list
		| argseqcont of Absyn.exp list
		| assignment of Absyn.AssignExp
		| record of Absyn.RecordExp
		| recarg of (symbol * exp * pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%nonassoc ASSIGN THEN DO OF
%right      ELSE
%left OR
%left AND 
%nonassoc GE GT LE LT NEQ EQ
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				()

exp: literal ()
   | LPAREN seqexp RPAREN ()
   | opexp ()
   | MINUS exp %prec UMINUS ()
   | array ()
   | cond ()
   | lets ()
   | lvalue ()
   | funcall ()
   | assignment ()
   | record ()

literal: NIL (Absyn.NilExp)
       | INT (Absyn.IntExp(INT))
       | STRING (Absyn.StringExp(STRING, STRINGleft))
       | BREAK (Absyn.BreakExp(BREAKleft))
 
seqexp:  ()
      |  exp seqexpcont ()

seqexpcont: ()
    | SEMICOLON exp seqexpcont ()

opexp: exp AND exp ()
     | exp OR exp ()
     | exp GE exp ()
     | exp GT exp ()
     | exp LE exp ()
     | exp LT exp ()
     | exp NEQ exp ()
     | exp EQ exp ()
     | exp PLUS exp ()
     | exp MINUS exp ()
     | exp TIMES exp ()
     | exp DIVIDE exp ()

cond: IF exp THEN exp ELSE exp ()
    | IF exp THEN exp ()
    | WHILE exp DO exp ()
    | FOR ID ASSIGN exp TO exp DO exp ()

array: ID LBRACK exp RBRACK OF exp ()

lets: LET decs IN seqexp END ()

funcall: ID LPAREN argseq RPAREN ()

argseq: ()
      | exp argseqcont ()

argseqcont: ()
          | COMMA exp argseqcont ()

assignment: lvalue ASSIGN exp ()

record: ID LBRACE ID EQ exp recarg RBRACE ()

recarg: ()
      | COMMA ID EQ exp recarg ()(* Defintions *)

decs : dec decs ()
     | () 

dec : tydec (tydec)
    | vardec (vardec)
    | fundec (fundec) 

tydec : TYPE ID EQ ty (Absyn.TypeDec({name= symbol ID, ty=ty, pos=TYPEleft} :: []))

ty : ID (Absyn.NameTy(symbol ID, IDleft))
   | LBRACE tyfields RBRACE (Absyn.RecordTy( tyfields))
   | ARRAY OF ID (Absyn.ArrayTy( symbol ID, IDleft))

tyfields : ([])
         | ID COLON ID tyfieldscont (
         	{ name= symbol ID1, escape= ref false,
         	  typ= symbol ID2, pos= ID1left } 
         	:: tyfieldscont )           

tyfieldscont : ([]) 
             | COMMA ID COLON ID tyfieldscont (
             	{ name= symbol ID1, escape= ref false,
         		 typ= symbol ID2, pos= ID1left } 
     		 	:: tyfieldscont)

vardec : VAR ID ASSIGN exp (Absyn.VarDec(
				{ name= symbol ID, typ = NONE,
				  init=exp, pos= VARleft }))
       | VAR ID COLON ID ASSIGN exp (Absyn.VarDec(
				{ name= symbol ID1, typ = SOME (symbol ID2, ID2left),
				  init=exp, pos= VARleft }))

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp (Absyn.FunctionDec(
				{ name= symbol ID, param= tyfields, 
				  result= NONE, body= exp, pos=FUNCTIONleft }))
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp (Absyn.FunctionDec(
				{ name= symbol ID1, param= tyfields, 
				  result= SOME(symbol ID2, ID2left), 
				  body= exp, pos=FUNCTIONleft }))

lvalue : ID ()
       | ID LBRACK exp RBRACK ()
       | lvalue DOT ID ()
       | lvalue LBRACK exp RBRACK ()

(* End of Definitions *)


