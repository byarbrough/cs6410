%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS | DECPREC

%nonterm  exp | program | decs | dec | tydec | ty | tyfields | tyfieldscont | vardec | fundec | lvalue | opexp | cond  | array | seqexpcont | seqexp | lets | literal | funcall | argseq | argseqcont | assignment | record | recarg | lvalueCont

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%nonassoc DECPREC
%nonassoc ASSIGN
%right      ELSE
%left OR
%left AND 
%nonassoc GE GT LE LT NEQ EQ
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)



program	: exp				()
exp: literal ()
   | LPAREN seqexp RPAREN ()
   | opexp ()
   | MINUS exp %prec UMINUS ()
   | array ()
   | cond ()
   | lets ()
   | lvalue ()
   | funcall ()
   | assignment ()
   | record ()
literal: NIL ()
       | INT ()
       | STRING ()
       | BREAK ()
seqexp:  ()
      |  exp seqexpcont ()
seqexpcont: ()
    | SEMICOLON exp seqexpcont ()
opexp: exp AND exp ()
     | exp OR exp ()
     | exp GE exp ()
     | exp GT exp ()
     | exp LE exp ()
     | exp LT exp ()
     | exp NEQ exp ()
     | exp EQ exp ()
     | exp PLUS exp ()
     | exp MINUS exp ()
     | exp TIMES exp ()
     | exp DIVIDE exp ()
cond: IF exp THEN exp ELSE exp ()
    | IF exp THEN exp ()
    | WHILE exp DO exp ()
    | FOR ID ASSIGN exp TO exp DO exp ()
array: ID LBRACK exp RBRACK OF exp ()
lets: LET decs IN seqexp END ()
funcall: ID LPAREN argseq RPAREN ()
argseq: ()
      | exp argseqcont ()
argseqcont: ()
          | COMMA exp argseqcont ()
assignment: lvalue ASSIGN exp ()
record: ID LBRACE ID EQ exp recarg RBRACE ()
recarg: ()
      | COMMA ID EQ exp recarg ()(* Defintions *)
decs : dec decs ()
     | () 
dec : tydec %prec DECPREC ()
    | vardec ()
    | fundec %prec DECPREC () 
tydec : TYPE ID EQ ty ()
ty : ID ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF ID ()
tyfields : ()
         | ID COLON ID tyfieldscont ()           
tyfieldscont : () 
             | COMMA ID COLON ID tyfieldscont ()
vardec : VAR ID ASSIGN exp ()
       | VAR ID COLON ID ASSIGN exp ()
fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()
lvalue : ID lvalueCont ()
lvalueCont : ()
           | DOT ID lvalueCont ()
           | LBRACK exp RBRACK lvalueCont ()
(* End of Definitions *)


