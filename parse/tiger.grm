%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp | program | decs | dec | tydec | ty | tyfields | tyfieldscont | vardec | fundec | lvalue | typeid

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%nonassoc AND OR
%nonassoc GE GT LE LT NEQ EQ
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp				()

	
exp: INT ()
    | exp PLUS exp ()
    | exp MINUS exp ()
    | exp TIMES exp ()
    | exp DIVIDE exp ()
    | MINUS exp %prec UMINUS ()
    

(* Defintions *)
decs : LBRACE dec RBRACE ()
dec : tydec ()
    | vardec ()
    | fundec ()
	  
tydec : TYPE typeid EQ ty ()

ty : typeid ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF typeid ()

tyfields : ()
         | ID COLON typeid tyfieldscont ()
            
tyfieldscont : () 
             | COMMA ID COLON typeid tyfieldscont ()

vardec : VAR ID COLON EQ exp ()
       | VAR ID COLON typeid COLON EQ exp ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp ()

lvalue : ID ()
       | lvalue DOT ID ()
       | lvalue LBRACK exp RBRACK ()

typeid : ID ()

(* End of Definitions *)


