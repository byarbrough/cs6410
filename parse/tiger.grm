open Symbol
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp of Absyn.exp
		| program of Absyn.exp
		| decs of Absyn.dec list
		| dec of Absyn.dec 
		| tydec of Absyn.dec 
		| ty of Absyn.ty 
		| tyfields of Absyn.field list 
		| tyfieldscont of Absyn.field list 
		| vardec of Absyn.dec
		| fundec of Absyn.fundec
		| lvalue of Absyn.var
		| opexp of Absyn.exp
		| cond  of Absyn.exp
		| array of Absyn.exp
		| seqexpcont of (Absyn.exp * pos) list
		| seqexp of Absyn.exp
		| lets of Absyn.exp
		| literal of Absyn.exp 
		| funcall of Absyn.exp
		| argseq of Absyn.exp list
		| argseqcont of Absyn.exp list
		| assignment of Absyn.exp
		| record of Absyn.exp
		| recarg of (symbol * Absyn.exp * pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%nonassoc ASSIGN 
%nonassoc THEN DO OF
%right      ELSE
%left OR
%left AND 
%nonassoc GE GT LE LT NEQ EQ
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				(exp)

exp: literal (literal)
   | LPAREN seqexp RPAREN (seqexp)
   | opexp (opexp)
   | MINUS exp %prec UMINUS (Absyn.OpExp(
          {left=Absyn.IntExp(0), oper= Absyn.MinusOp, right=exp, pos=MINUSleft}))
   | array (array)
   | cond (cond)
   | lets (lets)
   | lvalue (Absyn.VarExp(lvalue))
   | funcall (funcall)
   | assignment (assignment)
   | record (record)

literal: NIL (Absyn.NilExp)
       | INT (Absyn.IntExp(INT))
       | STRING (Absyn.StringExp(STRING, STRINGleft))
       | BREAK (Absyn.BreakExp(BREAKleft))

seqexp:  (Absyn.SeqExp([]))
      |  exp seqexpcont (Absyn.SeqExp((exp, expleft):: seqexpcont))

seqexpcont: ([])
    | SEMICOLON exp seqexpcont ((exp, expleft):: seqexpcont)

opexp: exp AND exp (Absyn.IfExp(
          {test=exp1, then'=exp2, else'=SOME (Absyn.IntExp(0)), pos=exp1left}))
     | exp OR exp (Absyn.IfExp(
          {test=exp1, then'=Absyn.IntExp(1), else'=SOME exp2, pos=exp1left}))
     | exp GE exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.GeOp, right=exp2, pos=exp1left}))
     | exp GT exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.GtOp, right=exp2, pos=exp1left}))
     | exp LE exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.LeOp, right=exp2, pos=exp1left}))
     | exp LT exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.LtOp, right=exp2, pos=exp1left}))
     | exp NEQ exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.NeqOp, right=exp2, pos=exp1left}))
     | exp EQ exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.EqOp, right=exp2, pos=exp1left}))
     | exp PLUS exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.PlusOp, right=exp2, pos=exp1left}))
     | exp MINUS exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.MinusOp, right=exp2, pos=exp1left}))
     | exp TIMES exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.TimesOp, right=exp2, pos=exp1left}))
     | exp DIVIDE exp (Absyn.OpExp(
          {left=exp1, oper= Absyn.DivideOp, right=exp2, pos=exp1left}))

cond: IF exp THEN exp ELSE exp (Absyn.IfExp(
          {test=exp1, then'=exp2, else'= SOME exp3, pos= IFleft}))
    | IF exp THEN exp (Absyn.IfExp(
          {test=exp1, then'= exp2, else'=NONE, pos= IFleft}))
    | WHILE exp DO exp (Absyn.WhileExp(
          {test=exp1, body=exp2, pos=WHILEleft}))
    | FOR ID ASSIGN exp TO exp DO exp (Absyn.ForExp(
          {var= symbol ID, escape = ref false, lo = exp1,
            hi=exp2, body=exp3, pos=FORleft}))

array: ID LBRACK exp RBRACK OF exp (Absyn.ArrayExp(
          {typ= symbol ID, size = exp1, init= exp2, pos= IDleft}))

lets: LET decs IN seqexp END (Absyn.LetExp(
          {decs= decs, body = seqexp, pos= LETleft}))

funcall: ID LPAREN argseq RPAREN (Absyn.CallExp(
          {func=symbol ID, args=argseq, pos=IDleft}))

argseq: ([])
      | exp argseqcont (exp :: argseqcont)

argseqcont: ([])
          | COMMA exp argseqcont (exp :: argseqcont)

assignment: lvalue ASSIGN exp (Absyn.AssignExp(
          {var= lvalue, exp = exp, pos= lvalueleft}))

record: ID LBRACE ID EQ exp recarg RBRACE (Absyn.RecordExp(
          {fields= (symbol ID2, exp, ID2left) :: recarg, 
                    typ= symbol ID1, pos = ID1left}))

recarg: ([])
      | COMMA ID EQ exp recarg ((symbol ID, exp, IDleft) :: recarg)

lvalue : ID (Absyn.SimpleVar(symbol ID, IDleft))
       | ID LBRACK exp RBRACK (Absyn.SubscriptVar( Absyn.SimpleVar(symbol ID, IDleft), exp, IDleft))
       | lvalue DOT ID (Absyn.FieldVar(lvalue, symbol ID, lvalueleft))
       | lvalue LBRACK exp RBRACK (Absyn.SubscriptVar(lvalue, exp, lvalueleft))

(* Defintions *)

decs : dec decs (dec :: decs)
     | ([]) 

dec : tydec (tydec)
    | vardec (vardec)
    | fundec (Absyn.FunctionDec([fundec]))

tydec : TYPE ID EQ ty (Absyn.TypeDec({name= symbol ID, ty=ty, pos=TYPEleft} :: []))

ty : ID (Absyn.NameTy(symbol ID, IDleft))
   | LBRACE tyfields RBRACE (Absyn.RecordTy( tyfields))
   | ARRAY OF ID (Absyn.ArrayTy( symbol ID, IDleft))

tyfields : ([])
         | ID COLON ID tyfieldscont (
         	{ name= symbol ID1, escape= ref false,
         	  typ= symbol ID2, pos= ID1left } 
         	:: tyfieldscont )           

tyfieldscont : ([]) 
             | COMMA ID COLON ID tyfieldscont (
             	{ name= symbol ID1, escape= ref false,
         		 typ= symbol ID2, pos= ID1left } 
     		 	:: tyfieldscont)

vardec : VAR ID ASSIGN exp (Absyn.VarDec(
				{ name= symbol ID, escape= ref false, typ = NONE,
				  init=exp, pos= VARleft }))
       | VAR ID COLON ID ASSIGN exp (Absyn.VarDec(
				{ name= symbol ID1,  escape= ref false, 
          typ = SOME (symbol ID2, ID2left),
				  init=exp, pos= VARleft }))

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp (
				{ name= symbol ID, params= tyfields, 
				  result= NONE, body= exp, pos=FUNCTIONleft })
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp (
				{ name= symbol ID1, params= tyfields, 
				  result= SOME(symbol ID2, ID2left), 
				  body= exp, pos=FUNCTIONleft })

(* End of Definitions *)


